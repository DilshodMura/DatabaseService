// <auto-generated />
using System;
using ExternalDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExternalDb.Migrations
{
    [DbContext(typeof(ExternalDbContext))]
    [Migration("20230228101030_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExternalDb.Entities.ExternalCity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("ExternalCities");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExternalCountries");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalCountryId");

                    b.ToTable("ExternalOffices");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalCity", b =>
                {
                    b.HasOne("ExternalDb.Entities.ExternalCountry", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalOffice", b =>
                {
                    b.HasOne("ExternalDb.Entities.ExternalCity", "City")
                        .WithMany("Offices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExternalDb.Entities.ExternalCountry", null)
                        .WithMany("Offices")
                        .HasForeignKey("ExternalCountryId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalCity", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("ExternalDb.Entities.ExternalCountry", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
